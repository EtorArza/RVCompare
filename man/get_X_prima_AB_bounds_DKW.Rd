% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RVCompare.R
\name{get_X_prima_AB_bounds_DKW}
\alias{get_X_prima_AB_bounds_DKW}
\title{Estimate X'_A and X'_B bounds with Dvoretzky–Kiefer–Wolfowitz}
\usage{
get_X_prima_AB_bounds_DKW(
  X_A_observed,
  X_B_observed,
  nOfQuantiles = 1000,
  alpha = 0.2,
  EPSILON = 1e-20
)
}
\arguments{
\item{X_A_observed}{array of the observed samples (real values) of X_A.}

\item{X_B_observed}{array of the observed samples (real values) of X_B.}

\item{nOfQuantiles}{(optional, default 1000) the number of points in the interval [0,1] in which the density is estimated.}

\item{alpha}{(optional, default value 0.2) the error of the confidence interval. If alpha = 0.05 then we have 95 percent confidence interval.}

\item{EPSILON}{(optional, default value 1e-20) minimum difference between two values to be considered different.}
}
\value{
Returns a list with the following fields:

- p: values in the interval [0,1] that represent the nOfQuantiles points in which the densities are estimated. Useful for plotting.

- X_prima_A_cumulative_empirical: an array with the empirical cumulative diustribution function of X_prima_A from 0 to p[[i]].

- X_prima_A_cumulative_upper: an array with the upper bounds of confidence 1 - alpha of the cumulative density of X_prima_A

- X_prima_A_cumulative_lower: an array with the lower bounds of confidence 1 - alpha of the cumulative density of X_prima_A

- X_prima_B_cumulative_empirical: The same as X_prima_A_cumulative_empirical for X'_B.

- X_prima_B_cumulative_upper: The same as X_prima_A_cumulative_upper for X'_B

- X_prima_B_cumulative_lower: The same as X_prima_A_cumulative_lower for X'_B
}
\description{
Estimate the confidence intervals for the cumulative distributions of X'_A and X'_B with Dvoretzky–Kiefer–Wolfowitz.
}
\examples{
### Example 1 ###
library(ggplot2)

X_A_observed <- rnorm(30,mean = 1, sd = 1)
X_B_observed <- rnorm(30,mean = 1.3, sd = 0.5)
res <- get_X_prima_AB_bounds_DKW(X_A_observed, X_B_observed)

densityesPlot = plot_X_prima_AB(res)
print(densityesPlot)
}
